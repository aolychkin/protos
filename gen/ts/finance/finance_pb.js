// source: finance.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.finance.AddChildRequest', null, global);
goog.exportSymbol('proto.finance.AddChildResponse', null, global);
goog.exportSymbol('proto.finance.AddGoalRequest', null, global);
goog.exportSymbol('proto.finance.AddGoalResponse', null, global);
goog.exportSymbol('proto.finance.CreateFundRequest', null, global);
goog.exportSymbol('proto.finance.CreateFundResponse', null, global);
goog.exportSymbol('proto.finance.FundTree', null, global);
goog.exportSymbol('proto.finance.GetFundRequest', null, global);
goog.exportSymbol('proto.finance.GetFundResponse', null, global);
goog.exportSymbol('proto.finance.GetFundTreeRequest', null, global);
goog.exportSymbol('proto.finance.GetFundTreeResponse', null, global);
goog.exportSymbol('proto.finance.GoalTree', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.finance.CreateFundRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.finance.CreateFundRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.finance.CreateFundRequest.displayName = 'proto.finance.CreateFundRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.finance.CreateFundResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.finance.CreateFundResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.finance.CreateFundResponse.displayName = 'proto.finance.CreateFundResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.finance.AddChildRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.finance.AddChildRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.finance.AddChildRequest.displayName = 'proto.finance.AddChildRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.finance.AddChildResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.finance.AddChildResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.finance.AddChildResponse.displayName = 'proto.finance.AddChildResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.finance.AddGoalRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.finance.AddGoalRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.finance.AddGoalRequest.displayName = 'proto.finance.AddGoalRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.finance.AddGoalResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.finance.AddGoalResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.finance.AddGoalResponse.displayName = 'proto.finance.AddGoalResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.finance.GetFundRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.finance.GetFundRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.finance.GetFundRequest.displayName = 'proto.finance.GetFundRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.finance.GetFundResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.finance.GetFundResponse.repeatedFields_, null);
};
goog.inherits(proto.finance.GetFundResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.finance.GetFundResponse.displayName = 'proto.finance.GetFundResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.finance.GetFundTreeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.finance.GetFundTreeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.finance.GetFundTreeRequest.displayName = 'proto.finance.GetFundTreeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.finance.GetFundTreeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.finance.GetFundTreeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.finance.GetFundTreeResponse.displayName = 'proto.finance.GetFundTreeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.finance.FundTree = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.finance.FundTree.repeatedFields_, null);
};
goog.inherits(proto.finance.FundTree, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.finance.FundTree.displayName = 'proto.finance.FundTree';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.finance.GoalTree = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.finance.GoalTree, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.finance.GoalTree.displayName = 'proto.finance.GoalTree';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.finance.CreateFundRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.finance.CreateFundRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.finance.CreateFundRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.finance.CreateFundRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
unionId: jspb.Message.getFieldWithDefault(msg, 1, 0),
label: jspb.Message.getFieldWithDefault(msg, 2, ""),
priority: jspb.Message.getFieldWithDefault(msg, 3, 0),
checkChild: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
ruleValue: jspb.Message.getFieldWithDefault(msg, 5, 0),
isTmp: jspb.Message.getBooleanFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.finance.CreateFundRequest}
 */
proto.finance.CreateFundRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.finance.CreateFundRequest;
  return proto.finance.CreateFundRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.finance.CreateFundRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.finance.CreateFundRequest}
 */
proto.finance.CreateFundRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUnionId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPriority(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCheckChild(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRuleValue(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsTmp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.finance.CreateFundRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.finance.CreateFundRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.finance.CreateFundRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.finance.CreateFundRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUnionId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPriority();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getCheckChild();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getRuleValue();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getIsTmp();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional int64 union_id = 1;
 * @return {number}
 */
proto.finance.CreateFundRequest.prototype.getUnionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.finance.CreateFundRequest} returns this
 */
proto.finance.CreateFundRequest.prototype.setUnionId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string label = 2;
 * @return {string}
 */
proto.finance.CreateFundRequest.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.finance.CreateFundRequest} returns this
 */
proto.finance.CreateFundRequest.prototype.setLabel = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 priority = 3;
 * @return {number}
 */
proto.finance.CreateFundRequest.prototype.getPriority = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.finance.CreateFundRequest} returns this
 */
proto.finance.CreateFundRequest.prototype.setPriority = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool check_child = 4;
 * @return {boolean}
 */
proto.finance.CreateFundRequest.prototype.getCheckChild = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.finance.CreateFundRequest} returns this
 */
proto.finance.CreateFundRequest.prototype.setCheckChild = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional int64 rule_value = 5;
 * @return {number}
 */
proto.finance.CreateFundRequest.prototype.getRuleValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.finance.CreateFundRequest} returns this
 */
proto.finance.CreateFundRequest.prototype.setRuleValue = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bool is_tmp = 6;
 * @return {boolean}
 */
proto.finance.CreateFundRequest.prototype.getIsTmp = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.finance.CreateFundRequest} returns this
 */
proto.finance.CreateFundRequest.prototype.setIsTmp = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.finance.CreateFundResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.finance.CreateFundResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.finance.CreateFundResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.finance.CreateFundResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
fundId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.finance.CreateFundResponse}
 */
proto.finance.CreateFundResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.finance.CreateFundResponse;
  return proto.finance.CreateFundResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.finance.CreateFundResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.finance.CreateFundResponse}
 */
proto.finance.CreateFundResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFundId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.finance.CreateFundResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.finance.CreateFundResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.finance.CreateFundResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.finance.CreateFundResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFundId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 fund_id = 1;
 * @return {number}
 */
proto.finance.CreateFundResponse.prototype.getFundId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.finance.CreateFundResponse} returns this
 */
proto.finance.CreateFundResponse.prototype.setFundId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.finance.AddChildRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.finance.AddChildRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.finance.AddChildRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.finance.AddChildRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
fundId: jspb.Message.getFieldWithDefault(msg, 1, 0),
childId: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.finance.AddChildRequest}
 */
proto.finance.AddChildRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.finance.AddChildRequest;
  return proto.finance.AddChildRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.finance.AddChildRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.finance.AddChildRequest}
 */
proto.finance.AddChildRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFundId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setChildId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.finance.AddChildRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.finance.AddChildRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.finance.AddChildRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.finance.AddChildRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFundId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getChildId();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int64 fund_id = 1;
 * @return {number}
 */
proto.finance.AddChildRequest.prototype.getFundId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.finance.AddChildRequest} returns this
 */
proto.finance.AddChildRequest.prototype.setFundId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 child_id = 2;
 * @return {number}
 */
proto.finance.AddChildRequest.prototype.getChildId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.finance.AddChildRequest} returns this
 */
proto.finance.AddChildRequest.prototype.setChildId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.finance.AddChildResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.finance.AddChildResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.finance.AddChildResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.finance.AddChildResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
fundId: jspb.Message.getFieldWithDefault(msg, 1, 0),
childId: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.finance.AddChildResponse}
 */
proto.finance.AddChildResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.finance.AddChildResponse;
  return proto.finance.AddChildResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.finance.AddChildResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.finance.AddChildResponse}
 */
proto.finance.AddChildResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFundId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setChildId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.finance.AddChildResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.finance.AddChildResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.finance.AddChildResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.finance.AddChildResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFundId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getChildId();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int64 fund_id = 1;
 * @return {number}
 */
proto.finance.AddChildResponse.prototype.getFundId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.finance.AddChildResponse} returns this
 */
proto.finance.AddChildResponse.prototype.setFundId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 child_id = 2;
 * @return {number}
 */
proto.finance.AddChildResponse.prototype.getChildId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.finance.AddChildResponse} returns this
 */
proto.finance.AddChildResponse.prototype.setChildId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.finance.AddGoalRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.finance.AddGoalRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.finance.AddGoalRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.finance.AddGoalRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
label: jspb.Message.getFieldWithDefault(msg, 2, ""),
total: jspb.Message.getFieldWithDefault(msg, 3, 0),
expireDate: (f = msg.getExpireDate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
fundId: jspb.Message.getFieldWithDefault(msg, 1, 0),
isTmp: jspb.Message.getBooleanFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.finance.AddGoalRequest}
 */
proto.finance.AddGoalRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.finance.AddGoalRequest;
  return proto.finance.AddGoalRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.finance.AddGoalRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.finance.AddGoalRequest}
 */
proto.finance.AddGoalRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotal(value);
      break;
    case 4:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setExpireDate(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFundId(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsTmp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.finance.AddGoalRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.finance.AddGoalRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.finance.AddGoalRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.finance.AddGoalRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTotal();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getExpireDate();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getFundId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getIsTmp();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional string label = 2;
 * @return {string}
 */
proto.finance.AddGoalRequest.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.finance.AddGoalRequest} returns this
 */
proto.finance.AddGoalRequest.prototype.setLabel = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 total = 3;
 * @return {number}
 */
proto.finance.AddGoalRequest.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.finance.AddGoalRequest} returns this
 */
proto.finance.AddGoalRequest.prototype.setTotal = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional google.protobuf.Timestamp expire_date = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.finance.AddGoalRequest.prototype.getExpireDate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 4));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.finance.AddGoalRequest} returns this
*/
proto.finance.AddGoalRequest.prototype.setExpireDate = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.finance.AddGoalRequest} returns this
 */
proto.finance.AddGoalRequest.prototype.clearExpireDate = function() {
  return this.setExpireDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.finance.AddGoalRequest.prototype.hasExpireDate = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int64 fund_id = 1;
 * @return {number}
 */
proto.finance.AddGoalRequest.prototype.getFundId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.finance.AddGoalRequest} returns this
 */
proto.finance.AddGoalRequest.prototype.setFundId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool is_tmp = 6;
 * @return {boolean}
 */
proto.finance.AddGoalRequest.prototype.getIsTmp = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.finance.AddGoalRequest} returns this
 */
proto.finance.AddGoalRequest.prototype.setIsTmp = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.finance.AddGoalResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.finance.AddGoalResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.finance.AddGoalResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.finance.AddGoalResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
goalId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.finance.AddGoalResponse}
 */
proto.finance.AddGoalResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.finance.AddGoalResponse;
  return proto.finance.AddGoalResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.finance.AddGoalResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.finance.AddGoalResponse}
 */
proto.finance.AddGoalResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGoalId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.finance.AddGoalResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.finance.AddGoalResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.finance.AddGoalResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.finance.AddGoalResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGoalId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 goal_id = 1;
 * @return {number}
 */
proto.finance.AddGoalResponse.prototype.getGoalId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.finance.AddGoalResponse} returns this
 */
proto.finance.AddGoalResponse.prototype.setGoalId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.finance.GetFundRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.finance.GetFundRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.finance.GetFundRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.finance.GetFundRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
fundId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.finance.GetFundRequest}
 */
proto.finance.GetFundRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.finance.GetFundRequest;
  return proto.finance.GetFundRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.finance.GetFundRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.finance.GetFundRequest}
 */
proto.finance.GetFundRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFundId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.finance.GetFundRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.finance.GetFundRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.finance.GetFundRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.finance.GetFundRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFundId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 fund_id = 1;
 * @return {number}
 */
proto.finance.GetFundRequest.prototype.getFundId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.finance.GetFundRequest} returns this
 */
proto.finance.GetFundRequest.prototype.setFundId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.finance.GetFundResponse.repeatedFields_ = [2,3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.finance.GetFundResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.finance.GetFundResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.finance.GetFundResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.finance.GetFundResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
label: jspb.Message.getFieldWithDefault(msg, 1, ""),
autoOperationIdList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
childIdList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
goalIdList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.finance.GetFundResponse}
 */
proto.finance.GetFundResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.finance.GetFundResponse;
  return proto.finance.GetFundResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.finance.GetFundResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.finance.GetFundResponse}
 */
proto.finance.GetFundResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt64() : [reader.readInt64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addAutoOperationId(values[i]);
      }
      break;
    case 3:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt64() : [reader.readInt64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addChildId(values[i]);
      }
      break;
    case 4:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt64() : [reader.readInt64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addGoalId(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.finance.GetFundResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.finance.GetFundResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.finance.GetFundResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.finance.GetFundResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAutoOperationIdList();
  if (f.length > 0) {
    writer.writePackedInt64(
      2,
      f
    );
  }
  f = message.getChildIdList();
  if (f.length > 0) {
    writer.writePackedInt64(
      3,
      f
    );
  }
  f = message.getGoalIdList();
  if (f.length > 0) {
    writer.writePackedInt64(
      4,
      f
    );
  }
};


/**
 * optional string label = 1;
 * @return {string}
 */
proto.finance.GetFundResponse.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.finance.GetFundResponse} returns this
 */
proto.finance.GetFundResponse.prototype.setLabel = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated int64 auto_operation_id = 2;
 * @return {!Array<number>}
 */
proto.finance.GetFundResponse.prototype.getAutoOperationIdList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.finance.GetFundResponse} returns this
 */
proto.finance.GetFundResponse.prototype.setAutoOperationIdList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.finance.GetFundResponse} returns this
 */
proto.finance.GetFundResponse.prototype.addAutoOperationId = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.finance.GetFundResponse} returns this
 */
proto.finance.GetFundResponse.prototype.clearAutoOperationIdList = function() {
  return this.setAutoOperationIdList([]);
};


/**
 * repeated int64 child_id = 3;
 * @return {!Array<number>}
 */
proto.finance.GetFundResponse.prototype.getChildIdList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.finance.GetFundResponse} returns this
 */
proto.finance.GetFundResponse.prototype.setChildIdList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.finance.GetFundResponse} returns this
 */
proto.finance.GetFundResponse.prototype.addChildId = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.finance.GetFundResponse} returns this
 */
proto.finance.GetFundResponse.prototype.clearChildIdList = function() {
  return this.setChildIdList([]);
};


/**
 * repeated int64 goal_id = 4;
 * @return {!Array<number>}
 */
proto.finance.GetFundResponse.prototype.getGoalIdList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.finance.GetFundResponse} returns this
 */
proto.finance.GetFundResponse.prototype.setGoalIdList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.finance.GetFundResponse} returns this
 */
proto.finance.GetFundResponse.prototype.addGoalId = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.finance.GetFundResponse} returns this
 */
proto.finance.GetFundResponse.prototype.clearGoalIdList = function() {
  return this.setGoalIdList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.finance.GetFundTreeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.finance.GetFundTreeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.finance.GetFundTreeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.finance.GetFundTreeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
fundId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.finance.GetFundTreeRequest}
 */
proto.finance.GetFundTreeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.finance.GetFundTreeRequest;
  return proto.finance.GetFundTreeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.finance.GetFundTreeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.finance.GetFundTreeRequest}
 */
proto.finance.GetFundTreeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFundId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.finance.GetFundTreeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.finance.GetFundTreeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.finance.GetFundTreeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.finance.GetFundTreeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFundId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 fund_id = 1;
 * @return {number}
 */
proto.finance.GetFundTreeRequest.prototype.getFundId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.finance.GetFundTreeRequest} returns this
 */
proto.finance.GetFundTreeRequest.prototype.setFundId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.finance.GetFundTreeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.finance.GetFundTreeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.finance.GetFundTreeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.finance.GetFundTreeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
fundTree: (f = msg.getFundTree()) && proto.finance.FundTree.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.finance.GetFundTreeResponse}
 */
proto.finance.GetFundTreeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.finance.GetFundTreeResponse;
  return proto.finance.GetFundTreeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.finance.GetFundTreeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.finance.GetFundTreeResponse}
 */
proto.finance.GetFundTreeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.finance.FundTree;
      reader.readMessage(value,proto.finance.FundTree.deserializeBinaryFromReader);
      msg.setFundTree(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.finance.GetFundTreeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.finance.GetFundTreeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.finance.GetFundTreeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.finance.GetFundTreeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFundTree();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.finance.FundTree.serializeBinaryToWriter
    );
  }
};


/**
 * optional FundTree fund_tree = 1;
 * @return {?proto.finance.FundTree}
 */
proto.finance.GetFundTreeResponse.prototype.getFundTree = function() {
  return /** @type{?proto.finance.FundTree} */ (
    jspb.Message.getWrapperField(this, proto.finance.FundTree, 1));
};


/**
 * @param {?proto.finance.FundTree|undefined} value
 * @return {!proto.finance.GetFundTreeResponse} returns this
*/
proto.finance.GetFundTreeResponse.prototype.setFundTree = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.finance.GetFundTreeResponse} returns this
 */
proto.finance.GetFundTreeResponse.prototype.clearFundTree = function() {
  return this.setFundTree(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.finance.GetFundTreeResponse.prototype.hasFundTree = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.finance.FundTree.repeatedFields_ = [8,9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.finance.FundTree.prototype.toObject = function(opt_includeInstance) {
  return proto.finance.FundTree.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.finance.FundTree} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.finance.FundTree.toObject = function(includeInstance, msg) {
  var f, obj = {
fundId: jspb.Message.getFieldWithDefault(msg, 1, 0),
fundLabel: jspb.Message.getFieldWithDefault(msg, 2, ""),
unionId: jspb.Message.getFieldWithDefault(msg, 3, 0),
priority: jspb.Message.getFieldWithDefault(msg, 4, 0),
checkChild: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
ruleValue: jspb.Message.getFieldWithDefault(msg, 6, 0),
fundValue: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
goalsList: jspb.Message.toObjectList(msg.getGoalsList(),
    proto.finance.GoalTree.toObject, includeInstance),
childsList: jspb.Message.toObjectList(msg.getChildsList(),
    proto.finance.FundTree.toObject, includeInstance),
isTmp: jspb.Message.getBooleanFieldWithDefault(msg, 10, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.finance.FundTree}
 */
proto.finance.FundTree.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.finance.FundTree;
  return proto.finance.FundTree.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.finance.FundTree} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.finance.FundTree}
 */
proto.finance.FundTree.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFundId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFundLabel(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUnionId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPriority(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCheckChild(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRuleValue(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFundValue(value);
      break;
    case 8:
      var value = new proto.finance.GoalTree;
      reader.readMessage(value,proto.finance.GoalTree.deserializeBinaryFromReader);
      msg.addGoals(value);
      break;
    case 9:
      var value = new proto.finance.FundTree;
      reader.readMessage(value,proto.finance.FundTree.deserializeBinaryFromReader);
      msg.addChilds(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsTmp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.finance.FundTree.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.finance.FundTree.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.finance.FundTree} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.finance.FundTree.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFundId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getFundLabel();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUnionId();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getPriority();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getCheckChild();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getRuleValue();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getFundValue();
  if (f !== 0.0) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = message.getGoalsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.finance.GoalTree.serializeBinaryToWriter
    );
  }
  f = message.getChildsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.finance.FundTree.serializeBinaryToWriter
    );
  }
  f = message.getIsTmp();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
};


/**
 * optional uint64 fund_id = 1;
 * @return {number}
 */
proto.finance.FundTree.prototype.getFundId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.finance.FundTree} returns this
 */
proto.finance.FundTree.prototype.setFundId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string fund_label = 2;
 * @return {string}
 */
proto.finance.FundTree.prototype.getFundLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.finance.FundTree} returns this
 */
proto.finance.FundTree.prototype.setFundLabel = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 union_id = 3;
 * @return {number}
 */
proto.finance.FundTree.prototype.getUnionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.finance.FundTree} returns this
 */
proto.finance.FundTree.prototype.setUnionId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 priority = 4;
 * @return {number}
 */
proto.finance.FundTree.prototype.getPriority = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.finance.FundTree} returns this
 */
proto.finance.FundTree.prototype.setPriority = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bool check_child = 5;
 * @return {boolean}
 */
proto.finance.FundTree.prototype.getCheckChild = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.finance.FundTree} returns this
 */
proto.finance.FundTree.prototype.setCheckChild = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional int64 rule_value = 6;
 * @return {number}
 */
proto.finance.FundTree.prototype.getRuleValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.finance.FundTree} returns this
 */
proto.finance.FundTree.prototype.setRuleValue = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional float fund_value = 7;
 * @return {number}
 */
proto.finance.FundTree.prototype.getFundValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.finance.FundTree} returns this
 */
proto.finance.FundTree.prototype.setFundValue = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * repeated GoalTree goals = 8;
 * @return {!Array<!proto.finance.GoalTree>}
 */
proto.finance.FundTree.prototype.getGoalsList = function() {
  return /** @type{!Array<!proto.finance.GoalTree>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.finance.GoalTree, 8));
};


/**
 * @param {!Array<!proto.finance.GoalTree>} value
 * @return {!proto.finance.FundTree} returns this
*/
proto.finance.FundTree.prototype.setGoalsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.finance.GoalTree=} opt_value
 * @param {number=} opt_index
 * @return {!proto.finance.GoalTree}
 */
proto.finance.FundTree.prototype.addGoals = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.finance.GoalTree, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.finance.FundTree} returns this
 */
proto.finance.FundTree.prototype.clearGoalsList = function() {
  return this.setGoalsList([]);
};


/**
 * repeated FundTree childs = 9;
 * @return {!Array<!proto.finance.FundTree>}
 */
proto.finance.FundTree.prototype.getChildsList = function() {
  return /** @type{!Array<!proto.finance.FundTree>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.finance.FundTree, 9));
};


/**
 * @param {!Array<!proto.finance.FundTree>} value
 * @return {!proto.finance.FundTree} returns this
*/
proto.finance.FundTree.prototype.setChildsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.finance.FundTree=} opt_value
 * @param {number=} opt_index
 * @return {!proto.finance.FundTree}
 */
proto.finance.FundTree.prototype.addChilds = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.finance.FundTree, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.finance.FundTree} returns this
 */
proto.finance.FundTree.prototype.clearChildsList = function() {
  return this.setChildsList([]);
};


/**
 * optional bool is_tmp = 10;
 * @return {boolean}
 */
proto.finance.FundTree.prototype.getIsTmp = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.finance.FundTree} returns this
 */
proto.finance.FundTree.prototype.setIsTmp = function(value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.finance.GoalTree.prototype.toObject = function(opt_includeInstance) {
  return proto.finance.GoalTree.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.finance.GoalTree} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.finance.GoalTree.toObject = function(includeInstance, msg) {
  var f, obj = {
goalId: jspb.Message.getFieldWithDefault(msg, 1, 0),
goalLabel: jspb.Message.getFieldWithDefault(msg, 2, ""),
expireDate: (f = msg.getExpireDate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
goalTotal: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
currentValue: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
sprintTotal: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
sprintIncome: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.finance.GoalTree}
 */
proto.finance.GoalTree.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.finance.GoalTree;
  return proto.finance.GoalTree.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.finance.GoalTree} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.finance.GoalTree}
 */
proto.finance.GoalTree.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGoalId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGoalLabel(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setExpireDate(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setGoalTotal(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCurrentValue(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSprintTotal(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSprintIncome(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.finance.GoalTree.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.finance.GoalTree.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.finance.GoalTree} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.finance.GoalTree.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGoalId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getGoalLabel();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getExpireDate();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getGoalTotal();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getCurrentValue();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getSprintTotal();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = message.getSprintIncome();
  if (f !== 0.0) {
    writer.writeFloat(
      7,
      f
    );
  }
};


/**
 * optional uint64 goal_id = 1;
 * @return {number}
 */
proto.finance.GoalTree.prototype.getGoalId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.finance.GoalTree} returns this
 */
proto.finance.GoalTree.prototype.setGoalId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string goal_label = 2;
 * @return {string}
 */
proto.finance.GoalTree.prototype.getGoalLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.finance.GoalTree} returns this
 */
proto.finance.GoalTree.prototype.setGoalLabel = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional google.protobuf.Timestamp expire_date = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.finance.GoalTree.prototype.getExpireDate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.finance.GoalTree} returns this
*/
proto.finance.GoalTree.prototype.setExpireDate = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.finance.GoalTree} returns this
 */
proto.finance.GoalTree.prototype.clearExpireDate = function() {
  return this.setExpireDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.finance.GoalTree.prototype.hasExpireDate = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional float goal_total = 4;
 * @return {number}
 */
proto.finance.GoalTree.prototype.getGoalTotal = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.finance.GoalTree} returns this
 */
proto.finance.GoalTree.prototype.setGoalTotal = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float current_value = 5;
 * @return {number}
 */
proto.finance.GoalTree.prototype.getCurrentValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.finance.GoalTree} returns this
 */
proto.finance.GoalTree.prototype.setCurrentValue = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional float sprint_total = 6;
 * @return {number}
 */
proto.finance.GoalTree.prototype.getSprintTotal = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.finance.GoalTree} returns this
 */
proto.finance.GoalTree.prototype.setSprintTotal = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional float sprint_income = 7;
 * @return {number}
 */
proto.finance.GoalTree.prototype.getSprintIncome = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.finance.GoalTree} returns this
 */
proto.finance.GoalTree.prototype.setSprintIncome = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


goog.object.extend(exports, proto.finance);
