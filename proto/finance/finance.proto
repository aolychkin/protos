syntax = "proto3";

package finance;

option go_package = "neo.finance.v1;finv1";

import "google/protobuf/timestamp.proto";

service FundConfig {
  rpc CreateFund (CreateFundRequest) returns (CreateFundResponse);
  rpc AddChild (AddChildRequest) returns (AddChildResponse);
  rpc AddGoal (AddGoalRequest) returns (AddGoalResponse);
  rpc GetFund (GetFundRequest) returns (GetFundResponse);
  rpc GetFundTree (GetFundTreeRequest) returns (GetFundTreeResponse);
}

message CreateFundRequest {
  int64 union_id =1;
  string label = 2;
  uint64 priority = 3;
  bool check_child =4;
  int64 rule_value =5;
  bool is_tmp = 6;
}

message CreateFundResponse {
  int64 fund_id = 1;
}

message AddChildRequest {
  int64 fund_id = 1;
  int64 child_id = 2;
}

message AddChildResponse {
  int64 fund_id = 1;
  int64 child_id = 2;
}

message AddGoalRequest {
  string label = 2;
  uint64 total = 3;
  google.protobuf.Timestamp expire_date =4;
  int64 fund_id = 1;  
  bool is_tmp = 6;
}

message AddGoalResponse {
  int64 goal_id = 1;
}


message GetFundRequest {
  int64 fund_id = 1;
}

//TODO: определить в зависимости от его использования
message GetFundResponse {
  string label = 1;    
  repeated int64 auto_operation_id = 2 [packed=true];
  repeated int64 child_id = 3 [packed=true];
  repeated int64 goal_id = 4 [packed=true];
}

message GetFundTreeRequest {
  int64 fund_id = 1;
}

//TODO: определить в зависимости от его использования
message GetFundTreeResponse {
  FundTree fund_tree = 1;
}

// ================================= //
// Вспомогательные структуры данных //
// =============================== //
message FundTree{
    uint64 FundID = 1;
    string FundLabe = 2;
    float Value = 3;
    repeated GoalTree Goals = 4;
    repeated FundTree Child = 5;
};

message GoalTree{
    uint64 GoalId = 1;
    string GoalLabel = 2;
    google.protobuf.Timestamp ExpireDate = 3;
    float GoalTotal = 4;
    float CurrentValue = 5;
    float SprintTotal = 6;
    float SprintIncome = 7;
};

