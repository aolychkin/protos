// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.2
// source: finance/finance.proto

package finv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateFundRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnionId    int64  `protobuf:"varint,1,opt,name=union_id,json=unionId,proto3" json:"union_id,omitempty"`
	Label      string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	Priority   uint64 `protobuf:"varint,3,opt,name=priority,proto3" json:"priority,omitempty"`
	CheckChild bool   `protobuf:"varint,4,opt,name=check_child,json=checkChild,proto3" json:"check_child,omitempty"`
	RuleValue  int64  `protobuf:"varint,5,opt,name=rule_value,json=ruleValue,proto3" json:"rule_value,omitempty"`
	IsTmp      bool   `protobuf:"varint,6,opt,name=is_tmp,json=isTmp,proto3" json:"is_tmp,omitempty"`
}

func (x *CreateFundRequest) Reset() {
	*x = CreateFundRequest{}
	mi := &file_finance_finance_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateFundRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFundRequest) ProtoMessage() {}

func (x *CreateFundRequest) ProtoReflect() protoreflect.Message {
	mi := &file_finance_finance_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFundRequest.ProtoReflect.Descriptor instead.
func (*CreateFundRequest) Descriptor() ([]byte, []int) {
	return file_finance_finance_proto_rawDescGZIP(), []int{0}
}

func (x *CreateFundRequest) GetUnionId() int64 {
	if x != nil {
		return x.UnionId
	}
	return 0
}

func (x *CreateFundRequest) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *CreateFundRequest) GetPriority() uint64 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *CreateFundRequest) GetCheckChild() bool {
	if x != nil {
		return x.CheckChild
	}
	return false
}

func (x *CreateFundRequest) GetRuleValue() int64 {
	if x != nil {
		return x.RuleValue
	}
	return 0
}

func (x *CreateFundRequest) GetIsTmp() bool {
	if x != nil {
		return x.IsTmp
	}
	return false
}

type CreateFundResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FundId int64 `protobuf:"varint,1,opt,name=fund_id,json=fundId,proto3" json:"fund_id,omitempty"`
}

func (x *CreateFundResponse) Reset() {
	*x = CreateFundResponse{}
	mi := &file_finance_finance_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateFundResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFundResponse) ProtoMessage() {}

func (x *CreateFundResponse) ProtoReflect() protoreflect.Message {
	mi := &file_finance_finance_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFundResponse.ProtoReflect.Descriptor instead.
func (*CreateFundResponse) Descriptor() ([]byte, []int) {
	return file_finance_finance_proto_rawDescGZIP(), []int{1}
}

func (x *CreateFundResponse) GetFundId() int64 {
	if x != nil {
		return x.FundId
	}
	return 0
}

type AddChildRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FundId  int64 `protobuf:"varint,1,opt,name=fund_id,json=fundId,proto3" json:"fund_id,omitempty"`
	ChildId int64 `protobuf:"varint,2,opt,name=child_id,json=childId,proto3" json:"child_id,omitempty"`
}

func (x *AddChildRequest) Reset() {
	*x = AddChildRequest{}
	mi := &file_finance_finance_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddChildRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddChildRequest) ProtoMessage() {}

func (x *AddChildRequest) ProtoReflect() protoreflect.Message {
	mi := &file_finance_finance_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddChildRequest.ProtoReflect.Descriptor instead.
func (*AddChildRequest) Descriptor() ([]byte, []int) {
	return file_finance_finance_proto_rawDescGZIP(), []int{2}
}

func (x *AddChildRequest) GetFundId() int64 {
	if x != nil {
		return x.FundId
	}
	return 0
}

func (x *AddChildRequest) GetChildId() int64 {
	if x != nil {
		return x.ChildId
	}
	return 0
}

type AddChildResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FundId  int64 `protobuf:"varint,1,opt,name=fund_id,json=fundId,proto3" json:"fund_id,omitempty"`
	ChildId int64 `protobuf:"varint,2,opt,name=child_id,json=childId,proto3" json:"child_id,omitempty"`
}

func (x *AddChildResponse) Reset() {
	*x = AddChildResponse{}
	mi := &file_finance_finance_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddChildResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddChildResponse) ProtoMessage() {}

func (x *AddChildResponse) ProtoReflect() protoreflect.Message {
	mi := &file_finance_finance_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddChildResponse.ProtoReflect.Descriptor instead.
func (*AddChildResponse) Descriptor() ([]byte, []int) {
	return file_finance_finance_proto_rawDescGZIP(), []int{3}
}

func (x *AddChildResponse) GetFundId() int64 {
	if x != nil {
		return x.FundId
	}
	return 0
}

func (x *AddChildResponse) GetChildId() int64 {
	if x != nil {
		return x.ChildId
	}
	return 0
}

type AddGoalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label      string                 `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	Total      uint64                 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	ExpireDate *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=expire_date,json=expireDate,proto3" json:"expire_date,omitempty"`
	FundId     int64                  `protobuf:"varint,1,opt,name=fund_id,json=fundId,proto3" json:"fund_id,omitempty"`
	IsTmp      bool                   `protobuf:"varint,6,opt,name=is_tmp,json=isTmp,proto3" json:"is_tmp,omitempty"`
}

func (x *AddGoalRequest) Reset() {
	*x = AddGoalRequest{}
	mi := &file_finance_finance_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddGoalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddGoalRequest) ProtoMessage() {}

func (x *AddGoalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_finance_finance_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddGoalRequest.ProtoReflect.Descriptor instead.
func (*AddGoalRequest) Descriptor() ([]byte, []int) {
	return file_finance_finance_proto_rawDescGZIP(), []int{4}
}

func (x *AddGoalRequest) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *AddGoalRequest) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *AddGoalRequest) GetExpireDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireDate
	}
	return nil
}

func (x *AddGoalRequest) GetFundId() int64 {
	if x != nil {
		return x.FundId
	}
	return 0
}

func (x *AddGoalRequest) GetIsTmp() bool {
	if x != nil {
		return x.IsTmp
	}
	return false
}

type AddGoalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoalId int64 `protobuf:"varint,1,opt,name=goal_id,json=goalId,proto3" json:"goal_id,omitempty"`
}

func (x *AddGoalResponse) Reset() {
	*x = AddGoalResponse{}
	mi := &file_finance_finance_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddGoalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddGoalResponse) ProtoMessage() {}

func (x *AddGoalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_finance_finance_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddGoalResponse.ProtoReflect.Descriptor instead.
func (*AddGoalResponse) Descriptor() ([]byte, []int) {
	return file_finance_finance_proto_rawDescGZIP(), []int{5}
}

func (x *AddGoalResponse) GetGoalId() int64 {
	if x != nil {
		return x.GoalId
	}
	return 0
}

type GetFundRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FundId int64 `protobuf:"varint,1,opt,name=fund_id,json=fundId,proto3" json:"fund_id,omitempty"`
}

func (x *GetFundRequest) Reset() {
	*x = GetFundRequest{}
	mi := &file_finance_finance_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFundRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFundRequest) ProtoMessage() {}

func (x *GetFundRequest) ProtoReflect() protoreflect.Message {
	mi := &file_finance_finance_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFundRequest.ProtoReflect.Descriptor instead.
func (*GetFundRequest) Descriptor() ([]byte, []int) {
	return file_finance_finance_proto_rawDescGZIP(), []int{6}
}

func (x *GetFundRequest) GetFundId() int64 {
	if x != nil {
		return x.FundId
	}
	return 0
}

// TODO: определить в зависимости от его использования
type GetFundResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label           string  `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	AutoOperationId []int64 `protobuf:"varint,2,rep,packed,name=auto_operation_id,json=autoOperationId,proto3" json:"auto_operation_id,omitempty"`
	ChildId         []int64 `protobuf:"varint,3,rep,packed,name=child_id,json=childId,proto3" json:"child_id,omitempty"`
	GoalId          []int64 `protobuf:"varint,4,rep,packed,name=goal_id,json=goalId,proto3" json:"goal_id,omitempty"`
}

func (x *GetFundResponse) Reset() {
	*x = GetFundResponse{}
	mi := &file_finance_finance_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFundResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFundResponse) ProtoMessage() {}

func (x *GetFundResponse) ProtoReflect() protoreflect.Message {
	mi := &file_finance_finance_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFundResponse.ProtoReflect.Descriptor instead.
func (*GetFundResponse) Descriptor() ([]byte, []int) {
	return file_finance_finance_proto_rawDescGZIP(), []int{7}
}

func (x *GetFundResponse) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *GetFundResponse) GetAutoOperationId() []int64 {
	if x != nil {
		return x.AutoOperationId
	}
	return nil
}

func (x *GetFundResponse) GetChildId() []int64 {
	if x != nil {
		return x.ChildId
	}
	return nil
}

func (x *GetFundResponse) GetGoalId() []int64 {
	if x != nil {
		return x.GoalId
	}
	return nil
}

type GetFundTreeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FundId int64 `protobuf:"varint,1,opt,name=fund_id,json=fundId,proto3" json:"fund_id,omitempty"`
}

func (x *GetFundTreeRequest) Reset() {
	*x = GetFundTreeRequest{}
	mi := &file_finance_finance_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFundTreeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFundTreeRequest) ProtoMessage() {}

func (x *GetFundTreeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_finance_finance_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFundTreeRequest.ProtoReflect.Descriptor instead.
func (*GetFundTreeRequest) Descriptor() ([]byte, []int) {
	return file_finance_finance_proto_rawDescGZIP(), []int{8}
}

func (x *GetFundTreeRequest) GetFundId() int64 {
	if x != nil {
		return x.FundId
	}
	return 0
}

// TODO: определить в зависимости от его использования
type GetFundTreeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FundTree *FundTree `protobuf:"bytes,1,opt,name=fund_tree,json=fundTree,proto3" json:"fund_tree,omitempty"`
}

func (x *GetFundTreeResponse) Reset() {
	*x = GetFundTreeResponse{}
	mi := &file_finance_finance_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFundTreeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFundTreeResponse) ProtoMessage() {}

func (x *GetFundTreeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_finance_finance_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFundTreeResponse.ProtoReflect.Descriptor instead.
func (*GetFundTreeResponse) Descriptor() ([]byte, []int) {
	return file_finance_finance_proto_rawDescGZIP(), []int{9}
}

func (x *GetFundTreeResponse) GetFundTree() *FundTree {
	if x != nil {
		return x.FundTree
	}
	return nil
}

// TODO: добавить к ним сверху / сделать их отдельнымы запросами на получение тоже
type FundTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FundId     uint64      `protobuf:"varint,1,opt,name=fund_id,json=fundId,proto3" json:"fund_id,omitempty"`
	FundLabel  string      `protobuf:"bytes,2,opt,name=fund_label,json=fundLabel,proto3" json:"fund_label,omitempty"`
	UnionId    int64       `protobuf:"varint,3,opt,name=union_id,json=unionId,proto3" json:"union_id,omitempty"`
	Priority   uint64      `protobuf:"varint,4,opt,name=priority,proto3" json:"priority,omitempty"`
	CheckChild bool        `protobuf:"varint,5,opt,name=check_child,json=checkChild,proto3" json:"check_child,omitempty"`
	RuleValue  int64       `protobuf:"varint,6,opt,name=rule_value,json=ruleValue,proto3" json:"rule_value,omitempty"`
	FundValue  float32     `protobuf:"fixed32,7,opt,name=fund_value,json=fundValue,proto3" json:"fund_value,omitempty"`
	Goals      []*GoalTree `protobuf:"bytes,8,rep,name=goals,proto3" json:"goals,omitempty"`
	Childs     []*FundTree `protobuf:"bytes,9,rep,name=childs,proto3" json:"childs,omitempty"`
	IsTmp      bool        `protobuf:"varint,10,opt,name=is_tmp,json=isTmp,proto3" json:"is_tmp,omitempty"`
}

func (x *FundTree) Reset() {
	*x = FundTree{}
	mi := &file_finance_finance_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FundTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FundTree) ProtoMessage() {}

func (x *FundTree) ProtoReflect() protoreflect.Message {
	mi := &file_finance_finance_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FundTree.ProtoReflect.Descriptor instead.
func (*FundTree) Descriptor() ([]byte, []int) {
	return file_finance_finance_proto_rawDescGZIP(), []int{10}
}

func (x *FundTree) GetFundId() uint64 {
	if x != nil {
		return x.FundId
	}
	return 0
}

func (x *FundTree) GetFundLabel() string {
	if x != nil {
		return x.FundLabel
	}
	return ""
}

func (x *FundTree) GetUnionId() int64 {
	if x != nil {
		return x.UnionId
	}
	return 0
}

func (x *FundTree) GetPriority() uint64 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *FundTree) GetCheckChild() bool {
	if x != nil {
		return x.CheckChild
	}
	return false
}

func (x *FundTree) GetRuleValue() int64 {
	if x != nil {
		return x.RuleValue
	}
	return 0
}

func (x *FundTree) GetFundValue() float32 {
	if x != nil {
		return x.FundValue
	}
	return 0
}

func (x *FundTree) GetGoals() []*GoalTree {
	if x != nil {
		return x.Goals
	}
	return nil
}

func (x *FundTree) GetChilds() []*FundTree {
	if x != nil {
		return x.Childs
	}
	return nil
}

func (x *FundTree) GetIsTmp() bool {
	if x != nil {
		return x.IsTmp
	}
	return false
}

type GoalTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoalId       uint64                 `protobuf:"varint,1,opt,name=goal_id,json=goalId,proto3" json:"goal_id,omitempty"`
	GoalLabel    string                 `protobuf:"bytes,2,opt,name=goal_label,json=goalLabel,proto3" json:"goal_label,omitempty"`
	ExpireDate   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=expire_date,json=expireDate,proto3" json:"expire_date,omitempty"`
	GoalTotal    float32                `protobuf:"fixed32,4,opt,name=goal_total,json=goalTotal,proto3" json:"goal_total,omitempty"`
	CurrentValue float32                `protobuf:"fixed32,5,opt,name=current_value,json=currentValue,proto3" json:"current_value,omitempty"`
	SprintTotal  float32                `protobuf:"fixed32,6,opt,name=sprint_total,json=sprintTotal,proto3" json:"sprint_total,omitempty"`
	SprintIncome float32                `protobuf:"fixed32,7,opt,name=sprint_income,json=sprintIncome,proto3" json:"sprint_income,omitempty"`
}

func (x *GoalTree) Reset() {
	*x = GoalTree{}
	mi := &file_finance_finance_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GoalTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoalTree) ProtoMessage() {}

func (x *GoalTree) ProtoReflect() protoreflect.Message {
	mi := &file_finance_finance_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoalTree.ProtoReflect.Descriptor instead.
func (*GoalTree) Descriptor() ([]byte, []int) {
	return file_finance_finance_proto_rawDescGZIP(), []int{11}
}

func (x *GoalTree) GetGoalId() uint64 {
	if x != nil {
		return x.GoalId
	}
	return 0
}

func (x *GoalTree) GetGoalLabel() string {
	if x != nil {
		return x.GoalLabel
	}
	return ""
}

func (x *GoalTree) GetExpireDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireDate
	}
	return nil
}

func (x *GoalTree) GetGoalTotal() float32 {
	if x != nil {
		return x.GoalTotal
	}
	return 0
}

func (x *GoalTree) GetCurrentValue() float32 {
	if x != nil {
		return x.CurrentValue
	}
	return 0
}

func (x *GoalTree) GetSprintTotal() float32 {
	if x != nil {
		return x.SprintTotal
	}
	return 0
}

func (x *GoalTree) GetSprintIncome() float32 {
	if x != nil {
		return x.SprintIncome
	}
	return 0
}

var File_finance_finance_proto protoreflect.FileDescriptor

var file_finance_finance_proto_rawDesc = []byte{
	0x0a, 0x15, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xb7, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x43, 0x68, 0x69, 0x6c, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x74, 0x6d, 0x70, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x54, 0x6d, 0x70, 0x22, 0x2d, 0x0a, 0x12, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x22, 0x45, 0x0a, 0x0f, 0x41, 0x64,
	0x64, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x66, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x49,
	0x64, 0x22, 0x46, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x22, 0xa9, 0x01, 0x0a, 0x0e, 0x41, 0x64,
	0x64, 0x47, 0x6f, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x3b, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x15,
	0x0a, 0x06, 0x69, 0x73, 0x5f, 0x74, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x69, 0x73, 0x54, 0x6d, 0x70, 0x22, 0x2a, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x47, 0x6f, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x6f, 0x61, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x67, 0x6f, 0x61, 0x6c, 0x49,
	0x64, 0x22, 0x29, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x22, 0x93, 0x01, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x2e, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x03, 0x42, 0x02, 0x10, 0x01, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x6f, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x42, 0x02, 0x10, 0x01, 0x52, 0x07, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x07, 0x67, 0x6f, 0x61, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x42, 0x02, 0x10, 0x01, 0x52, 0x06, 0x67, 0x6f, 0x61, 0x6c,
	0x49, 0x64, 0x22, 0x2d, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x65,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x75, 0x6e, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66, 0x75, 0x6e, 0x64, 0x49,
	0x64, 0x22, 0x45, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x65, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x66, 0x75, 0x6e, 0x64,
	0x5f, 0x74, 0x72, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x66, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x46, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x65, 0x65, 0x52, 0x08,
	0x66, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x65, 0x65, 0x22, 0xc3, 0x02, 0x0a, 0x08, 0x46, 0x75, 0x6e,
	0x64, 0x54, 0x72, 0x65, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x66, 0x75, 0x6e, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x19, 0x0a,
	0x08, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x43, 0x68, 0x69, 0x6c, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x66, 0x75, 0x6e, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x67, 0x6f, 0x61, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x47, 0x6f, 0x61,
	0x6c, 0x54, 0x72, 0x65, 0x65, 0x52, 0x05, 0x67, 0x6f, 0x61, 0x6c, 0x73, 0x12, 0x29, 0x0a, 0x06,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x66,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x46, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x65, 0x65, 0x52,
	0x06, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x74, 0x6d,
	0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x54, 0x6d, 0x70, 0x22, 0x8b,
	0x02, 0x0a, 0x08, 0x47, 0x6f, 0x61, 0x6c, 0x54, 0x72, 0x65, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x67,
	0x6f, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x67, 0x6f,
	0x61, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x6f, 0x61, 0x6c, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x6f, 0x61, 0x6c, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0x3b, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x6f, 0x61, 0x6c, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x67, 0x6f, 0x61, 0x6c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x73, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x70, 0x72, 0x69, 0x6e,
	0x74, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c,
	0x73, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x32, 0xda, 0x02, 0x0a,
	0x0a, 0x46, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x45, 0x0a, 0x0a, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x12, 0x1a, 0x2e, 0x66, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x41, 0x64, 0x64, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x12, 0x18,
	0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x68, 0x69, 0x6c,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x47, 0x6f, 0x61, 0x6c, 0x12, 0x17,
	0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x47, 0x6f, 0x61, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x41, 0x64, 0x64, 0x47, 0x6f, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3c, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x12, 0x17, 0x2e, 0x66,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x48, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x65, 0x65, 0x12, 0x1b,
	0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6e, 0x64,
	0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x66, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x65,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x16, 0x5a, 0x14, 0x6e, 0x65, 0x6f,
	0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x3b, 0x66, 0x69, 0x6e, 0x76,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_finance_finance_proto_rawDescOnce sync.Once
	file_finance_finance_proto_rawDescData = file_finance_finance_proto_rawDesc
)

func file_finance_finance_proto_rawDescGZIP() []byte {
	file_finance_finance_proto_rawDescOnce.Do(func() {
		file_finance_finance_proto_rawDescData = protoimpl.X.CompressGZIP(file_finance_finance_proto_rawDescData)
	})
	return file_finance_finance_proto_rawDescData
}

var file_finance_finance_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_finance_finance_proto_goTypes = []any{
	(*CreateFundRequest)(nil),     // 0: finance.CreateFundRequest
	(*CreateFundResponse)(nil),    // 1: finance.CreateFundResponse
	(*AddChildRequest)(nil),       // 2: finance.AddChildRequest
	(*AddChildResponse)(nil),      // 3: finance.AddChildResponse
	(*AddGoalRequest)(nil),        // 4: finance.AddGoalRequest
	(*AddGoalResponse)(nil),       // 5: finance.AddGoalResponse
	(*GetFundRequest)(nil),        // 6: finance.GetFundRequest
	(*GetFundResponse)(nil),       // 7: finance.GetFundResponse
	(*GetFundTreeRequest)(nil),    // 8: finance.GetFundTreeRequest
	(*GetFundTreeResponse)(nil),   // 9: finance.GetFundTreeResponse
	(*FundTree)(nil),              // 10: finance.FundTree
	(*GoalTree)(nil),              // 11: finance.GoalTree
	(*timestamppb.Timestamp)(nil), // 12: google.protobuf.Timestamp
}
var file_finance_finance_proto_depIdxs = []int32{
	12, // 0: finance.AddGoalRequest.expire_date:type_name -> google.protobuf.Timestamp
	10, // 1: finance.GetFundTreeResponse.fund_tree:type_name -> finance.FundTree
	11, // 2: finance.FundTree.goals:type_name -> finance.GoalTree
	10, // 3: finance.FundTree.childs:type_name -> finance.FundTree
	12, // 4: finance.GoalTree.expire_date:type_name -> google.protobuf.Timestamp
	0,  // 5: finance.FundConfig.CreateFund:input_type -> finance.CreateFundRequest
	2,  // 6: finance.FundConfig.AddChild:input_type -> finance.AddChildRequest
	4,  // 7: finance.FundConfig.AddGoal:input_type -> finance.AddGoalRequest
	6,  // 8: finance.FundConfig.GetFund:input_type -> finance.GetFundRequest
	8,  // 9: finance.FundConfig.GetFundTree:input_type -> finance.GetFundTreeRequest
	1,  // 10: finance.FundConfig.CreateFund:output_type -> finance.CreateFundResponse
	3,  // 11: finance.FundConfig.AddChild:output_type -> finance.AddChildResponse
	5,  // 12: finance.FundConfig.AddGoal:output_type -> finance.AddGoalResponse
	7,  // 13: finance.FundConfig.GetFund:output_type -> finance.GetFundResponse
	9,  // 14: finance.FundConfig.GetFundTree:output_type -> finance.GetFundTreeResponse
	10, // [10:15] is the sub-list for method output_type
	5,  // [5:10] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_finance_finance_proto_init() }
func file_finance_finance_proto_init() {
	if File_finance_finance_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_finance_finance_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_finance_finance_proto_goTypes,
		DependencyIndexes: file_finance_finance_proto_depIdxs,
		MessageInfos:      file_finance_finance_proto_msgTypes,
	}.Build()
	File_finance_finance_proto = out.File
	file_finance_finance_proto_rawDesc = nil
	file_finance_finance_proto_goTypes = nil
	file_finance_finance_proto_depIdxs = nil
}
